{"version":3,"sources":["Questionnaire.js","App.js","serviceWorker.js","index.js"],"names":["Questionnaire","props","state","hoursPerWeek","hostingDollarsPerMonthFixed","hostingDollarsPerMonthVariable","conversionRate","opportunityCostDollarsPerYear","margin","numUsers","handleChange","bind","target","event","name","val","Number","value","this","setState","monthlyRate","monthlyCosts","costPerUser","pricePerUser","onFormChange","Math","floor","Form","Group","Label","InputGroup","Control","type","placeholder","onChange","autoFocus","Append","Text","Prepend","React","Component","require","App","handleFormChange","result","className","Jumbotron","style","backgroundColor","Row","Col","md","src","width","alt","Container","toLocaleString","navigator","language","minimumFractionDigits","maximumFractionDigits","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f09aa40f.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\n\nexport default class Questionnaire extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoursPerWeek: 10,\n      hostingDollarsPerMonthFixed: 100,\n      hostingDollarsPerMonthVariable: 100,\n      conversionRate: 0.1,\n      opportunityCostDollarsPerYear: 100000,\n      margin: 0.2,\n      numUsers: 1000,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChange({ target: \"\" });\n  }\n\n  async handleChange(event) {\n    let val;\n    switch (event.target.name) {\n      case \"margin\":\n        val = Number(event.target.value) / 100;\n        break;\n      case \"conversionRate\":\n        val = Number(event.target.value) / 100;\n        break;\n      default:\n        val = Number(event.target.value);\n    }\n\n    await this.setState({\n      [event.target.name]: val,\n    });\n\n    const monthlyRate =\n      (this.state.opportunityCostDollarsPerYear / 12) *\n      (this.state.hoursPerWeek / 40);\n    const monthlyCosts =\n      this.state.hostingDollarsPerMonthFixed +\n      (this.state.hostingDollarsPerMonthVariable / 1000) * this.state.numUsers;\n    const costPerUser = (monthlyRate + monthlyCosts) / this.state.numUsers;\n    const pricePerUser =\n      costPerUser * (1 / this.state.conversionRate) * (1 + this.state.margin);\n\n    this.props.onFormChange({\n      monthlyRate: Math.floor(monthlyRate),\n      monthlyCosts: Math.floor(monthlyCosts),\n      costPerUser: Math.floor(costPerUser),\n      pricePerUser: Math.floor(pricePerUser),\n    });\n  }\n\n  render() {\n    return (\n      <Form>\n        <Form.Group>\n          <Form.Label>How much do you want to work on it?</Form.Label>\n          <InputGroup>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"10\"\n              name=\"hoursPerWeek\"\n              onChange={this.handleChange}\n              autoFocus\n            />\n            <InputGroup.Append>\n              <InputGroup.Text>hours per week</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            What are your <b>fixed</b> costs?\n          </Form.Label>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>$</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"100\"\n              name=\"hostingDollarsPerMonthFixed\"\n              onChange={this.handleChange}\n            />\n            <InputGroup.Append>\n              <InputGroup.Text>per month</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n          <Form.Text>\n            i.e. how much would it cost to run with zero users?\n          </Form.Text>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            What are your <b>variable</b> costs?\n          </Form.Label>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>$</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"100\"\n              name=\"hostingDollarsPerMonthVariable\"\n              onChange={this.handleChange}\n            />\n            <InputGroup.Append>\n              <InputGroup.Text>per month per 1k users</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n          <Form.Text>Use your best guess.</Form.Text>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>What percentage of users will pay?</Form.Label>\n          <InputGroup>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"10\"\n              name=\"conversionRate\"\n              onChange={this.handleChange}\n            />\n            <InputGroup.Append>\n              <InputGroup.Text>%</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>How much do you make at your traditional job?</Form.Label>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>$</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"100000\"\n              name=\"opportunityCostDollarsPerYear\"\n              onChange={this.handleChange}\n            />\n            <InputGroup.Append>\n              <InputGroup.Text>per year</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>What margins do you want?</Form.Label>\n          <InputGroup>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"20\"\n              name=\"margin\"\n              onChange={this.handleChange}\n            />\n            <InputGroup.Append>\n              <InputGroup.Text>%</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n          <Form.Text>\n            i.e. after your labor and costs are paid for, how much more do you\n            want as profit?\n          </Form.Text>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>How many users will you have?</Form.Label>\n          <InputGroup>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"1000\"\n              name=\"numUsers\"\n              onChange={this.handleChange}\n            />\n            <InputGroup.Append>\n              <InputGroup.Text>users</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n          <Form.Text>Whether paying or non-paying.</Form.Text>\n        </Form.Group>\n      </Form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport Questionnaire from './Questionnaire.js'\n\nrequire('jsesc')\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      monthlyRate: 0,\n      monthlyCosts: 0,\n      costPerUser: 0,\n      pricePerUser: 0,\n    }\n\n    this.handleFormChange = this.handleFormChange.bind(this)\n  }\n\n  async handleFormChange(result) {\n    await this.setState({\n      monthlyRate: result.monthlyRate,\n      monthlyCosts: result.monthlyCosts,\n      costPerUser: result.costPerUser,\n      pricePerUser: result.pricePerUser,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron className=\"pb-0\" style={{backgroundColor: '#fafafa'}}>\n          <Row>\n            <Col md={12} className=\"text-center\">\n              <img src=\"logo.png\" width=\"300\" alt=\"Pricegun logo\" />\n              <p>\n                Estimate the minimum you should charge for your SaaS side project.\n                <br />\n                <small><i>No information leaves your computer.</i></small>\n              </p>\n            </Col>\n          </Row>\n        </Jumbotron>\n        <Container>\n          <Row>\n            <Col md={6}>\n              <Questionnaire onFormChange={this.handleFormChange} />\n            </Col>\n            <Col md={6} className=\"text-center\">\n              <h5>You should charge users at least</h5>\n              <h1>${this.state.pricePerUser.toLocaleString(navigator.language, {minimumFractionDigits: 0, maximumFractionDigits: 0})} per month</h1>\n              <h5>Explanation:</h5>\n              Your rate: ${this.state.monthlyRate.toLocaleString(navigator.language, {minimumFractionDigits: 0, maximumFractionDigits: 0})} per month\n              <br />\n                Your project's costs: ${this.state.monthlyCosts.toLocaleString(navigator.language, {minimumFractionDigits: 0, maximumFractionDigits: 0})} per month\n              <br />\n                User cost: {this.state.costPerUser < 1 ?\n                    \"< $1 \" :\n                    `$${this.state.costPerUser.toLocaleString(navigator.language, {minimumFractionDigits: 0, maximumFractionDigits: 0})} `}\n                per user per month\n              <br />\n              <br />\n              <br />\n              <p>\n                <i>\n                  <small>\n                    This is an estimated minimum.<br />\n                    You may want to charge more based on demand.<br />\n                    Read <a href=\"https://amzn.to/2YEkAMu\">How to Price Effectively</a> for more.\n                  </small>\n                </i>\n              </p>\n              <div className=\"mx-auto my-5\">\n                <small>\n                  <i>by Ben Carlsson @ <a href=\"https://twos.dev\">twos.dev</a></i>\n                </small>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}