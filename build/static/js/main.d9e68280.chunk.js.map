{"version":3,"sources":["Questionnaire.js","App.js","serviceWorker.js","index.js"],"names":["Questionnaire","props","state","hoursPerWeek","hostingDollarsPerMonthFixed","hostingDollarsPerMonthVariable","conversionRate","opportunityCostDollarsPerYear","margin","numUsers","handleChange","bind","target","event","name","val","Number","value","this","setState","monthlyRate","monthlyCosts","costPerUser","pricePerUser","onFormChange","Math","floor","Form","Group","Label","Control","type","placeholder","onChange","autoFocus","InputGroup","Prepend","Text","Append","React","Component","App","handleFormChange","result","className","Jumbotron","style","backgroundColor","Row","Col","md","src","width","alt","Container","toLocaleString","navigator","language","minimumFractionDigits","maximumFractionDigits","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9e68280.chunk.js","sourcesContent":["import React from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nexport default class Questionnaire extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hoursPerWeek: 10,\n      hostingDollarsPerMonthFixed: 100,\n      hostingDollarsPerMonthVariable: 100,\n      conversionRate: 0.5,\n      opportunityCostDollarsPerYear: 100000,\n      margin: 0.2,\n      numUsers: 1000,\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleChange({target: ''})\n  }\n\n  async handleChange(event) {\n    let val\n    switch (event.target.name) {\n      case 'margin':\n      val = Number(event.target.value) / 100\n      break\n      case 'conversionRate':\n      val = Number(event.target.value) / 100\n      break\n      default:\n      val = Number(event.target.value)\n    }\n\n    await this.setState({\n      [event.target.name]: val\n    })\n\n    const monthlyRate = (this.state.opportunityCostDollarsPerYear / 12) * (this.state.hoursPerWeek / 40)\n    const monthlyCosts = this.state.hostingDollarsPerMonthFixed + (this.state.hostingDollarsPerMonthVariable / 1000 * this.state.numUsers)\n    const costPerUser = (monthlyRate + monthlyCosts) / this.state.numUsers\n    const pricePerUser = costPerUser * (1 / this.state.conversionRate) * (1 + this.state.margin)\n\n    this.props.onFormChange({\n      monthlyRate: Math.floor(monthlyRate),\n      monthlyCosts: Math.floor(monthlyCosts),\n      costPerUser: Math.floor(costPerUser),\n      pricePerUser: Math.floor(pricePerUser),\n    })\n  }\n\n  render() {\n    return (\n      <Form>\n        <Form.Group>\n          <Form.Label>\n            How many hours per week do you work on it?\n          </Form.Label>\n          <Form.Control type=\"text\" placeholder=\"10\" name=\"hoursPerWeek\" onChange={this.handleChange} autoFocus />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            What are your <b>fixed</b> costs?\n          </Form.Label>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>$</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control type=\"text\" placeholder=\"100\" name=\"hostingDollarsPerMonthFixed\" onChange={this.handleChange} />\n            <InputGroup.Append>\n              <InputGroup.Text>per month</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n          <Form.Text>i.e. how much would it cost you to stay online even with zero users?</Form.Text>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            What are your <b>variable</b> costs, per 1k users?\n          </Form.Label>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>$</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control type=\"text\" placeholder=\"100\" name=\"hostingDollarsPerMonthVariable\" onChange={this.handleChange} />\n            <InputGroup.Append>\n              <InputGroup.Text>per month</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            What percentage of users will pay?\n          </Form.Label>\n          <InputGroup>\n            <Form.Control type=\"text\" placeholder=\"1\" name=\"conversionRate\" onChange={this.handleChange}  />\n            <InputGroup.Append>\n              <InputGroup.Text>%</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            How much do you make at your traditional job?\n          </Form.Label>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>$</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control type=\"text\" placeholder=\"100000\" name=\"opportunityCostDollarsPerYear\" onChange={this.handleChange}  />\n            <InputGroup.Append>\n              <InputGroup.Text>per year</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            What margins do you want?\n          </Form.Label>\n          <InputGroup>\n            <Form.Control type=\"text\" placeholder=\"20\" name=\"margin\" onChange={this.handleChange}  />\n            <InputGroup.Append>\n              <InputGroup.Text>%</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            How many users will you have?\n          </Form.Label>\n          <InputGroup>\n            <Form.Control type=\"text\" placeholder=\"1000\" name=\"numUsers\" onChange={this.handleChange}  />\n            <InputGroup.Append>\n              <InputGroup.Text>users</InputGroup.Text>\n            </InputGroup.Append>\n          </InputGroup>\n          <Form.Text>Whether paying or non-paying.</Form.Text>\n        </Form.Group>\n      </Form>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport Questionnaire from './Questionnaire.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      monthlyRate: 0,\n      monthlyCosts: 0,\n      costPerUser: 0,\n      pricePerUser: 0,\n    }\n\n    this.handleFormChange = this.handleFormChange.bind(this)\n  }\n\n  async handleFormChange(result) {\n    await this.setState({\n      monthlyRate: result.monthlyRate,\n      monthlyCosts: result.monthlyCosts,\n      costPerUser: result.costPerUser,\n      pricePerUser: result.pricePerUser,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron className=\"pb-0\" style={{backgroundColor: '#fafafa'}}>\n          <Row>\n            <Col md={12} className=\"text-center\">\n              <img src=\"logo.png\" width=\"300\" alt=\"Pricegun logo\" />\n              <p>\n                Estimate how much you should charge for your SaaS side project.\n                <br />\n                <small><i>No information leaves your computer.</i></small>\n              </p>\n            </Col>\n          </Row>\n        </Jumbotron>\n        <Container>\n          <Row>\n            <Col md={6}>\n              <Questionnaire onFormChange={this.handleFormChange} />\n            </Col>\n            <Col md={6} className=\"text-center\">\n              <h5>You should charge users</h5>\n              <h1>${this.state.pricePerUser.toLocaleString(navigator.language, {minimumFractionDigits: 0, maximumFractionDigits: 0})} per month</h1>\n              <h5>Explanation:</h5>\n              Your rate: ${this.state.monthlyRate.toLocaleString(navigator.language, {minimumFractionDigits: 0, maximumFractionDigits: 0})} per month\n              <br />\n                Your project's costs: ${this.state.monthlyCosts.toLocaleString(navigator.language, {minimumFractionDigits: 0, maximumFractionDigits: 0})} per month\n              <br />\n                User cost: {this.state.costPerUser < 1 ?\n                    \"< $1 \" :\n                    `$${this.state.costPerUser.toLocaleString(navigator.language, {minimumFractionDigits: 0, maximumFractionDigits: 0})} `}\n                per user per month\n              <br />\n              <br />\n              <br />\n              <p>\n                <i>\n                  <small>\n                    Unknown whether your product is worth this to your users.\n                    <br />\n                    That part is up to you. :)\n                    <br />\n                    Read <a href=\"https://amzn.to/2YEkAMu\">How to Price Effectively</a> for more.\n                  </small>\n                </i>\n              </p>\n              <div className=\"mx-auto my-5\">\n                <small>\n                  <i>by Ben Carlsson @ <a href=\"https://twos.dev\">twos.dev</a></i>\n                  <br />\n                  <i>Ship code faster with consistency across all teams @ <a href=\"https://yourbase.io\">YourBase</a></i>\n                </small>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}